// Code generated by MockGen. DO NOT EDIT.
// Source: mashu.example/internal/usecase/repository (interfaces: ChatRepo)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "mashu.example/internal/entity/chat"
)

// MockChatRepo is a mock of ChatRepo interface.
type MockChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepoMockRecorder
}

// MockChatRepoMockRecorder is the mock recorder for MockChatRepo.
type MockChatRepoMockRecorder struct {
	mock *MockChatRepo
}

// NewMockChatRepo creates a new mock instance.
func NewMockChatRepo(ctrl *gomock.Controller) *MockChatRepo {
	mock := &MockChatRepo{ctrl: ctrl}
	mock.recorder = &MockChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepo) EXPECT() *MockChatRepoMockRecorder {
	return m.recorder
}

// GetDMByUserId mocks base method.
func (m *MockChatRepo) GetDMByUserId(arg0, arg1 uuid.UUID) (*entity.DirectMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDMByUserId", arg0, arg1)
	ret0, _ := ret[0].(*entity.DirectMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDMByUserId indicates an expected call of GetDMByUserId.
func (mr *MockChatRepoMockRecorder) GetDMByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDMByUserId", reflect.TypeOf((*MockChatRepo)(nil).GetDMByUserId), arg0, arg1)
}

// GetDMsByPartUserId mocks base method.
func (m *MockChatRepo) GetDMsByPartUserId(arg0 uuid.UUID) ([]*entity.DirectMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDMsByPartUserId", arg0)
	ret0, _ := ret[0].([]*entity.DirectMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDMsByPartUserId indicates an expected call of GetDMsByPartUserId.
func (mr *MockChatRepoMockRecorder) GetDMsByPartUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDMsByPartUserId", reflect.TypeOf((*MockChatRepo)(nil).GetDMsByPartUserId), arg0)
}

// GetDirectMessage mocks base method.
func (m *MockChatRepo) GetDirectMessage(arg0 uuid.UUID) (*entity.DirectMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectMessage", arg0)
	ret0, _ := ret[0].(*entity.DirectMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectMessage indicates an expected call of GetDirectMessage.
func (mr *MockChatRepoMockRecorder) GetDirectMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectMessage", reflect.TypeOf((*MockChatRepo)(nil).GetDirectMessage), arg0)
}

// SaveDirectMessage mocks base method.
func (m *MockChatRepo) SaveDirectMessage(arg0 *entity.DirectMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDirectMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDirectMessage indicates an expected call of SaveDirectMessage.
func (mr *MockChatRepoMockRecorder) SaveDirectMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDirectMessage", reflect.TypeOf((*MockChatRepo)(nil).SaveDirectMessage), arg0)
}
